<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AllUppercas" xml:space="preserve">
    <value>Utilizar solo mayúsculas es casi lo mismo que utilizar solo minúculas</value>
  </data>
  <data name="AvoidAssociatedDates" xml:space="preserve">
    <value>Evite utilizar fechas y años que puedan relacionarse con usted</value>
  </data>
  <data name="AvoidAssociatedYears" xml:space="preserve">
    <value>Evite utilizar años que puedan relacionarse con usted</value>
  </data>
  <data name="AvoidRecentYears" xml:space="preserve">
    <value>Evite utilizar años recientes</value>
  </data>
  <data name="AvoidRepeats" xml:space="preserve">
    <value>Evite utilizar palabras y caracteres repetidos</value>
  </data>
  <data name="Capitalization" xml:space="preserve">
    <value>Utilizar una mayúscula en la primera letra no es de gran utilidad</value>
  </data>
  <data name="CommonNames" xml:space="preserve">
    <value>Nombres y apellidos comunes son fáciles de adivinar</value>
  </data>
  <data name="Dates" xml:space="preserve">
    <value>Las fechas son fáciles de adivinar</value>
  </data>
  <data name="Default1" xml:space="preserve">
    <value>Utilice algunas palabras, pero evite frases comunes</value>
  </data>
  <data name="Default2" xml:space="preserve">
    <value>No es necesario utilizar símbolos, números ni letras mayúsculas</value>
  </data>
  <data name="ExtraFeedback" xml:space="preserve">
    <value>Agregue una o dos palabras más, es mejor utilizar palabras de uso poco frecuente</value>
  </data>
  <data name="GroupRepeats" xml:space="preserve">
    <value>Repeticiones del tipo 'abcabcabc' son apenas más difíciles de adivinar que 'abc'</value>
  </data>
  <data name="KeyRows" xml:space="preserve">
    <value>Líneas rectas del teclado son fáciles de adivinar</value>
  </data>
  <data name="NamesThemselves" xml:space="preserve">
    <value>Nombres y apellidos por sí solos son fáciles de adivinar</value>
  </data>
  <data name="RecentYears" xml:space="preserve">
    <value>Años recientes son fáciles de adivinar</value>
  </data>
  <data name="ReversedWords" xml:space="preserve">
    <value>Utilizar palabras invertidas no hace que sea mucho más difícil de adivinar</value>
  </data>
  <data name="ShortKeyboardPatterns" xml:space="preserve">
    <value>Patrones simples de teclado son fáciles de adivinar</value>
  </data>
  <data name="SimilarToCommon" xml:space="preserve">
    <value>Es similar a una contraseña utilizada comúnmente</value>
  </data>
  <data name="SingleRepeats" xml:space="preserve">
    <value>Repeticiones del tipo 'aaa' son fáciles de adivinar</value>
    <comment> </comment>
  </data>
  <data name="Substitutions" xml:space="preserve">
    <value>Sustituciones simples como '@' en lugar de 'a' no son de gran utilidad</value>
  </data>
  <data name="Top10" xml:space="preserve">
    <value>Es una de las 10 contraseñas más utilizadas</value>
  </data>
  <data name="Top100" xml:space="preserve">
    <value>Es una de las 100 contraseñas más utilizadas</value>
  </data>
  <data name="UseLongerPattern" xml:space="preserve">
    <value>Utilice un patrón de teclado más largo con varios cambios de dirección</value>
  </data>
  <data name="VeryCommon" xml:space="preserve">
    <value>Es una contraseña muy comúnmente utilizada</value>
  </data>
  <data name="WordItselft" xml:space="preserve">
    <value>Una sola palabra es fácil de adivinar</value>
  </data>
</root>